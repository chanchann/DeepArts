webpackJsonp([0],{"31jc":function(e,t){},Hpwy:function(e,t){},SwNy:function(e,t){},Szto:function(e,t){},pNoo:function(e,t,a){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var i={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("el-row",[a("el-form",{attrs:{rules:e.rules}},[a("el-col",{attrs:{span:6}},[e.tip?a("el-tooltip",{staticClass:"item",attrs:{effect:"dark",placement:"right"}},[a("div",{attrs:{slot:"content"},domProps:{innerHTML:e._s(e.tip)},slot:"content"}),e._v(" "),a("el-form-item",{attrs:{label:e.label,prop:"value"}})],1):a("el-form-item",{attrs:{label:e.label,prop:"value"}})],1),e._v(" "),a("el-col",{attrs:{span:12}},[a("el-form-item",e._l(e.radios,function(t){return a("el-radio",{key:t.index,attrs:{label:t.index},on:{change:e.callback},model:{value:e.value,callback:function(t){e.value=t},expression:"value"}},[e._v(e._s(t.name)+"\n          "),t.tip?a("el-tooltip",{staticClass:"item",attrs:{effect:"dark",content:t.tip,placement:"right"}},[a("i",{staticClass:"el-icon-question"})]):e._e()],1)}),1)],1)],1)],1)},staticRenderFns:[]};var n={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("el-row",[a("el-form",{attrs:{rules:e.rules}},[a("el-col",{attrs:{span:6}},[e.tip?a("el-tooltip",{staticClass:"item",attrs:{effect:"dark",placement:"right"}},[a("div",{attrs:{slot:"content"},domProps:{innerHTML:e._s(e.tip)},slot:"content"}),e._v(" "),a("el-form-item",{attrs:{label:e.label,prop:"value"}})],1):a("el-form-item",{attrs:{label:e.label,prop:"value"}})],1),e._v(" "),a("el-col",{attrs:{span:12}},[a("el-form-item",[a("el-input",{attrs:{placeholder:e.placeholder},on:{change:e.callback},model:{value:e.value,callback:function(t){e.value=t},expression:"value"}})],1)],1)],1)],1)},staticRenderFns:[]};var o={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("el-row",[a("el-col",{attrs:{span:6}},[a("el-form-item",{attrs:{label:e.label}})],1),e._v(" "),a("el-col",{attrs:{span:12}},[a("el-input-number",{attrs:{min:e.min,max:e.max},on:{change:e.callback},model:{value:e.value,callback:function(t){e.value=t},expression:"value"}})],1)],1)},staticRenderFns:[]};var l={name:"LuwuMain",components:{ModelOptionRadioItem:a("VU/8")({name:"ModelOptionRadioItem",props:["label","radios","callback","default_index","required","tip"],data:function(){return{value:this.default_index,rules:{value:[{required:this.required,message:"此项为必填项！",trigger:"blur"}]}}},methods:{sendToParent:function(e){this.callback(e)}}},i,!1,function(e){a("Hpwy")},null,null).exports,ModelOptionInputItem:a("VU/8")({name:"ModelOptionInputItem",props:["label","placeholder","required","callback","tip"],data:function(){return{value:"",rules:{value:[{required:this.required,message:"此项为必填项！",trigger:"blur"}]}}}},n,!1,function(e){a("31jc")},null,null).exports,ModelOptionNumberItem:a("VU/8")({name:"ModelOptionNumberItem",props:["label","value","min","max","callback"],data:function(){return{}}},o,!1,function(e){a("Szto")},null,null).exports},data:function(){return{form:{engine:""},info:{engine:[{index:1,name:"AutoKeras",tip:""},{index:2,name:"NNI",tip:""},{index:3,name:"预设模型",tip:""}],engine_index:0,model_name:"LuwuDenseNet121ImageClassifier",dataset:[{index:1,name:"按文件夹组织",tip:"每一个类别的图片放在一个单独文件夹下，这些文件夹又放在同一个文件夹下"}],models:[],dataset_index:1,dataset_input_placeholder:"请填写路径...",origin_dataset_path:"",target_dataset_path:"",model_save_path:"",batch_size:32,epochs:30}}},methods:{getImageClassifierEngines:function(){var e=this,t=this.base_url+"/api/v1/image/classifier/engines/";this.$axios.get(t).then(function(t){0===t.data.code?(e.info.engine=t.data.data,e.$notify.success(t.data.msg)):e.$notify.error(t.data.msg)}).catch(function(t){console.error(t),e.$notify.error("啊哦，出错了！")})},getImageClassifierList:function(){var e=this,t=this.base_url+"/api/v1/image/classifier/models/"+this.info.engine_index+"/";this.$axios.get(t).then(function(t){0===t.data.code?(e.info.models=t.data.data,e.$notify.success(t.data.msg)):e.$notify.error(t.data.msg)}).catch(function(t){console.error(t),e.$notify.error("啊哦，出错了！")})},changeEngineIndex:function(e){this.info.engine_index=e,this.getImageClassifierList()},changeModelName:function(e){this.info.model_name=e,console.log(this.info.model_name)},changeDatasetIndex:function(e){this.info.dataset_index=e},changeOriginDatasetPath:function(e){this.info.origin_dataset_path=e},changeTargetDatasetPath:function(e){this.info.target_dataset_path=e},changeModelSavePath:function(e){this.info.model_save_path=e,console.log(this.info.model_save_path)},changeBatchSize:function(e){this.info.batch_size=e},changeEpochs:function(e){this.info.epochs=e},createProject:function(){var e=this;if(0!==this.info.engine_index)if(0!==this.info.dataset_index)if(""!==this.info.origin_dataset_path){console.log(this.info.model_name);var t={model_name:this.info.model_name,dataset_index:this.info.dataset_index,origin_dataset_path:this.info.origin_dataset_path,target_dataset_path:this.info.target_dataset_path,model_save_path:this.info.model_save_path,batch_size:this.info.batch_size,epochs:this.info.epochs},a=this.base_url+"/api/v1/image/classifier/project/create/";this.$axios.post(a,t).then(function(t){0===t.data.code?(e.$notify.success(t.data.msg),window.location.href="/home/train_project"):e.$notify.error(t.data.msg)}).catch(function(t){console.error(t),e.$notify.error("啊哦，出错了！")})}else this.$notify.error("请选择原始数据集路径！");else this.$notify.error("请选择数据集类型！");else this.$notify.error("请选择模型引擎！")}},created:function(){this.getImageClassifierEngines()}},r={render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("el-card",{staticClass:"box-card"},[a("div",{staticClass:"clearfix",attrs:{slot:"header"},slot:"header"},[a("span",[e._v("图像分类")])]),e._v(" "),a("el-form",[a("div",[a("el-divider",{attrs:{"content-position":"left"}},[e._v("引擎")]),e._v(" "),a("model-option-radio-item",{attrs:{label:"模型生成引擎:",radios:e.info.engine,callback:e.changeEngineIndex,default_index:0,required:!0}})],1),e._v(" "),e.info.engine_index>0?a("div",[a("el-divider",{attrs:{"content-position":"left"}},[e._v("模型")]),e._v(" "),a("model-option-radio-item",{attrs:{label:"选择模型:",radios:e.info.models,callback:e.changeModelName,default_index:e.info.model_name,required:!0}})],1):e._e(),e._v(" "),e.info.engine_index>0?a("div",[a("el-divider",{attrs:{"content-position":"left"}},[e._v("数据集")]),e._v(" "),a("model-option-radio-item",{attrs:{label:"数据集类型:",radios:e.info.dataset,callback:e.changeDatasetIndex,default_index:1,required:!0,tip:"决定了 `陆吾` 以何种方式读取并处理数据"}}),e._v(" "),a("model-option-input-item",{attrs:{label:"原始数据集路径:",placeholder:e.info.dataset_input_placeholder,required:!0,callback:e.changeOriginDatasetPath,tip:"存储数据集的文件夹路径，请填写绝对路径。<br/><br/>注意，当时候 docker 部署时，需要响应调整数据集路径。"}}),e._v(" "),a("model-option-input-item",{attrs:{label:"清洗后数据集保存路径:",placeholder:e.info.dataset_input_placeholder,tip:"`陆吾` 在进行模型训练前，会先尝试将原始数据集转成TFRecordDataset的格式，并切分验证集。<br/><br/>页面中的“清洗后数据集保存路径”即为保存转换后的TFRecordDataset格式的数据集的路径，只需要指定放在哪个文件夹下即可。<br/><br/>如果不填写，默认与“原始数据集路径”保持一致。",required:!1,callback:e.changeTargetDatasetPath}}),e._v(" "),a("model-option-input-item",{attrs:{label:"模型及生成代码的保存路径:",placeholder:e.info.dataset_input_placeholder,tip:"训练过程中，`陆吾` 会保存训练过程中的当前最佳模型参数、日志文件，并在训练完成后生成调用代码模板。<br/><br/>这些文件将被保存到页面上“模型及生成代码的保存路径”中填写的文件夹下。<br/><br/>如果不填写，默认与“清洗后数据集保存路径”保持一致。",required:!1,callback:e.changeModelSavePath}})],1):e._e(),e._v(" "),e.info.engine_index>0?a("div",[a("el-divider",{attrs:{"content-position":"left"}},[e._v("训练参数")]),e._v(" "),a("model-option-number-item",{attrs:{label:"批大小 (Batch Size)",value:e.info.batch_size,min:1,max:256,callback:e.changeBatchSize}}),e._v(" "),a("model-option-number-item",{attrs:{label:"最大训练轮次 (Epochs)",value:e.info.epochs,min:1,max:1e4,callback:e.changeEpochs}})],1):e._e(),e._v(" "),a("el-divider"),e._v(" "),a("el-button",{attrs:{type:"primary"},on:{click:e.createProject}},[e._v("添加项目")])],1)],1)},staticRenderFns:[]};var s=a("VU/8")(l,r,!1,function(e){a("SwNy")},null,null);t.default=s.exports}});
//# sourceMappingURL=0.b9305aaa5a8a0abd763b.js.map